{"ast":null,"code":"import CONSTANTS from \"utils/constants\";\n\n/**\r\n * Generate base URL including OMDB required params\r\n * @param {string} url\r\n * @returns {string}\r\n */\nconst getBaseURL = url => {\n  return `${url}?${new URLSearchParams({\n    apikey: CONSTANTS.API_KEY\n  }).toString()}`;\n};\n\n/**\r\n * Service object exported to use across application\r\n */\nconst service = {\n  get: async (url, params) => {\n    try {\n      let response = await fetch(`${getBaseURL(url)}&${new URLSearchParams({\n        ...params\n      }).toString()}`, {\n        method: \"GET\",\n        cache: \"no-cache\",\n        // *default, no-cache, reload, force-cache, only-if-cached\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\" // application/x-www-form-urlencoded, application/json\n        }\n      }).then(res => res.json());\n      if (response.Response === \"False\") {\n        throw Error(response.Error);\n      } else {\n        return response;\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error.message;\n      } else {\n        throw String(error);\n      }\n    }\n  },\n  post: async (url, data) => {\n    const response = await fetch(getBaseURL(url), {\n      method: \"POST\",\n      cache: \"no-cache\",\n      // *default, no-cache, reload, force-cache, only-if-cached\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\" // application/x-www-form-urlencoded, application/json\n      },\n      body: JSON.stringify(data)\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n  }\n};\nexport default service;","map":{"version":3,"names":["CONSTANTS","getBaseURL","url","URLSearchParams","apikey","API_KEY","toString","service","get","params","response","fetch","method","cache","headers","then","res","json","Response","Error","error","message","String","post","data","body","JSON","stringify"],"sources":["D:/Project/movieapp/react-query-movies-app/src/utils/service.ts"],"sourcesContent":["import CONSTANTS from \"utils/constants\";\r\n\r\n/**\r\n * Generate base URL including OMDB required params\r\n * @param {string} url\r\n * @returns {string}\r\n */\r\nconst getBaseURL = (url: string): string => {\r\n  return `${url}?${new URLSearchParams({\r\n    apikey: CONSTANTS.API_KEY,\r\n  }).toString()}`;\r\n};\r\n\r\n/**\r\n * Service object exported to use across application\r\n */\r\nconst service = {\r\n  get: async (url: string, params: object) => {\r\n    try {\r\n      let response = await fetch(\r\n        `${getBaseURL(url)}&${new URLSearchParams({\r\n          ...params,\r\n        }).toString()}`,\r\n        {\r\n          method: \"GET\",\r\n          cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n          headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\", // application/x-www-form-urlencoded, application/json\r\n          },\r\n        }\r\n      ).then((res) => res.json());\r\n\r\n      if (response.Response === \"False\") {\r\n        throw Error(response.Error);\r\n      } else {\r\n        return response;\r\n      }\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error.message;\r\n      } else {\r\n        throw String(error);\r\n      }\r\n    }\r\n  },\r\n  post: async (url: string, data: object) => {\r\n    const response = await fetch(getBaseURL(url), {\r\n      method: \"POST\",\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\", // application/x-www-form-urlencoded, application/json\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n  },\r\n};\r\n\r\nexport default service;\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,iBAAiB;;AAEvC;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAIC,GAAW,IAAa;EAC1C,OAAO,GAAGA,GAAG,IAAI,IAAIC,eAAe,CAAC;IACnCC,MAAM,EAAEJ,SAAS,CAACK;EACpB,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE;AACjB,CAAC;;AAED;AACA;AACA;AACA,MAAMC,OAAO,GAAG;EACdC,GAAG,EAAE,MAAAA,CAAON,GAAW,EAAEO,MAAc,KAAK;IAC1C,IAAI;MACF,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CACxB,GAAGV,UAAU,CAACC,GAAG,CAAC,IAAI,IAAIC,eAAe,CAAC;QACxC,GAAGM;MACL,CAAC,CAAC,CAACH,QAAQ,CAAC,CAAC,EAAE,EACf;QACEM,MAAM,EAAE,KAAK;QACbC,KAAK,EAAE,UAAU;QAAE;QACnBC,OAAO,EAAE;UACP,cAAc,EAAE,mCAAmC,CAAE;QACvD;MACF,CACF,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;MAE3B,IAAIP,QAAQ,CAACQ,QAAQ,KAAK,OAAO,EAAE;QACjC,MAAMC,KAAK,CAACT,QAAQ,CAACS,KAAK,CAAC;MAC7B,CAAC,MAAM;QACL,OAAOT,QAAQ;MACjB;IACF,CAAC,CAAC,OAAOU,KAAK,EAAE;MACd,IAAIA,KAAK,YAAYD,KAAK,EAAE;QAC1B,MAAMC,KAAK,CAACC,OAAO;MACrB,CAAC,MAAM;QACL,MAAMC,MAAM,CAACF,KAAK,CAAC;MACrB;IACF;EACF,CAAC;EACDG,IAAI,EAAE,MAAAA,CAAOrB,GAAW,EAAEsB,IAAY,KAAK;IACzC,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAACV,UAAU,CAACC,GAAG,CAAC,EAAE;MAC5CU,MAAM,EAAE,MAAM;MACdC,KAAK,EAAE,UAAU;MAAE;MACnBC,OAAO,EAAE;QACP,cAAc,EAAE,mCAAmC,CAAE;MACvD,CAAC;MACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;IAC3B,CAAC,CAAC;IACF,OAAOd,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1B;AACF,CAAC;AAED,eAAeV,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}